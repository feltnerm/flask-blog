/*!* Modernizr v2.0.6 * http://www.modernizr.com * * Copyright(c) 2009-2011 Faruk Ates,Paul Irish,Alex Sexton * Dual-licensed under the BSD or MIT licenses:www.modernizr.com/license/ */ window.Modernizr =(function(window,document,undefined){var version = '2.0.6',Modernizr ={},// option for enabling the HTML classes to be added enableClasses = true,docElement = document.documentElement,docHead = document.head || document.getElementsByTagName('head')[0],mod = 'modernizr',modElem = document.createElement(mod),mStyle = modElem.style,inputElem = document.createElement('input'),smile = ':)',toString = Object.prototype.toString,// List of property values to set for css tests. See ticket #21 prefixes = ' -webkit- -moz- -o- -ms- -khtml- '.split(' '),// Following spec is to expose vendor-specific style properties as:// elem.style.WebkitBorderRadius // and the following would be incorrect:// elem.style.webkitBorderRadius // Webkit ghosts their properties in lowercase but Opera & Moz do not. // Microsoft foregoes prefixes entirely <= IE8,but appears to // use a lowercase `ms` instead of the correct `Ms` in IE9 // More here:http://github.com/Modernizr/Modernizr/issues/issue/21 domPrefixes = 'Webkit Moz O ms Khtml'.split(' '),ns ={'svg':'http://www.w3.org/2000/svg'},tests ={},inputs ={},attrs ={},classes = [],featureName,// used in testing loop // Inject element with style element and some CSS rules injectElementWithStyles = function(rule,callback,nodes,testnames){var style,ret,node,div = document.createElement('div');if(parseInt(nodes,10)){// In order not to give false positives we create a node for each test // This also allows the method to scale for unspecified uses while(nodes--){node = document.createElement('div');node.id = testnames ? testnames[nodes]:mod+(nodes+1);div.appendChild(node)}}// <style>elements in IE6-9 are considered 'NoScope' elements and therefore will be removed // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element // with a 'scoped' element,in our case the soft-hyphen entity as it won't mess with our measurements. // http://msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx style = ['&shy;','<style>',rule,'</style>'].join('');div.id = mod;div.innerHTML+= style;docElement.appendChild(div);ret = callback(div,rule);div.parentNode.removeChild(div);return!!ret},// adapted from matchMedia polyfill // by Scott Jehl and Paul Irish // gist.github.com/786768 testMediaQuery = function(mq){if(window.matchMedia){return matchMedia(mq).matches}var bool;injectElementWithStyles('@media '+mq+'{#'+mod+'{position:absolute}}',function(node){bool =(window.getComputedStyle ? getComputedStyle(node,null):node.currentStyle)['position'] == 'absolute'});return bool},isEventSupported =(function(){var TAGNAMES ={'select':'input','change':'input','submit':'form','reset':'form','error':'img','load':'img','abort':'img'};function isEventSupported(eventName,element){element = element || document.createElement(TAGNAMES[eventName] || 'div');eventName = 'on'+eventName;// When using `setAttribute`,IE skips "unload",WebKit skips "unload" and "resize",whereas `in` "catches" those var isSupported = eventName in element;if(!isSupported){// If it has no `setAttribute`(i.e. doesn't implement Node interface),try generic element if(!element.setAttribute){element = document.createElement('div')}if(element.setAttribute && element.removeAttribute){element.setAttribute(eventName,'');isSupported = is(element[eventName],'function');// If property was created,"remove it"(by setting value to `undefined`) if(!is(element[eventName],undefined)){element[eventName] = undefined}element.removeAttribute(eventName)}}element = null;return isSupported}return isEventSupported})();// hasOwnProperty shim by kangax needed for Safari 2.0 support var _hasOwnProperty =({}).hasOwnProperty,hasOwnProperty;if(!is(_hasOwnProperty,undefined) &&!is(_hasOwnProperty.call,undefined)){hasOwnProperty = function(object,property){return _hasOwnProperty.call(object,property)}}else{hasOwnProperty = function(object,property){return((property in object) && is(object.constructor.prototype[property],undefined))}}function setCss(str){mStyle.cssText = str}function setCssAll(str1,str2){return setCss(prefixes.join(str1+';')+(str2 || ''))}function is(obj,type){return typeof obj === type}function contains(str,substr){return!!~(''+str).indexOf(substr)}function testProps(props,prefixed){for(var i in props){if(mStyle[props[i]]!== undefined){return prefixed == 'pfx' ? props[i]:true}}return false}function testPropsAll(prop,prefixed){var ucProp = prop.charAt(0).toUpperCase()+prop.substr(1),props =(prop+' '+domPrefixes.join(ucProp+' ')+ucProp).split(' ');return testProps(props,prefixed)}var testBundle =(function(styles,tests){var style = styles.join(''),len = tests.length;injectElementWithStyles(style,function(node,rule){var style = document.styleSheets[document.styleSheets.length - 1],// IE8 will bork if you create a custom build that excludes both fontface and generatedcontent tests. // So we check for cssRules and that there is a rule available // More here:https://github.com/Modernizr/Modernizr/issues/288 & https://github.com/Modernizr/Modernizr/issues/293 cssText = style.cssRules && style.cssRules[0] ? style.cssRules[0].cssText:style.cssText || "",children = node.childNodes,hash ={};while(len--){hash[children[len].id] = children[len]}Modernizr['touch'] =('ontouchstart' in window) || hash['touch'].offsetTop === 9;Modernizr['csstransforms3d'] = hash['csstransforms3d'].offsetLeft === 9;Modernizr['generatedcontent'] = hash['generatedcontent'].offsetHeight>= 1;Modernizr['fontface'] = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0},len,tests)})([// Pass in styles to be injected into document '@font-face{font-family:"font";src:url("https://")}',['@media(',prefixes.join('touch-enabled),('),mod,')','{#touch{top:9px;position:absolute}}'].join(''),['@media(',prefixes.join('transform-3d),('),mod,')','{#csstransforms3d{left:9px;position:absolute}}'].join(''),['#generatedcontent:after{content:"',smile,'";visibility:hidden}'].join('')],['fontface','touch','csstransforms3d','generatedcontent']);tests['flexbox'] = function(){function setPrefixedValueCSS(element,property,value,extra){property+= ':';element.style.cssText =(property+prefixes.join(value+';'+property)).slice(0,-property.length)+(extra || '')}function setPrefixedPropertyCSS(element,property,value,extra){element.style.cssText = prefixes.join(property+':'+value+';')+(extra || '')}var c = document.createElement('div'),elem = document.createElement('div');setPrefixedValueCSS(c,'display','box','width:42px;padding:0;');setPrefixedPropertyCSS(elem,'box-flex','1','width:10px;');c.appendChild(elem);docElement.appendChild(c);var ret = elem.offsetWidth === 42;c.removeChild(elem);docElement.removeChild(c);return ret};// On the S60 and BB Storm,getContext exists,but always returns undefined // http://github.com/Modernizr/Modernizr/issues/issue/97/ tests['canvas'] = function(){var elem = document.createElement('canvas');return!!(elem.getContext && elem.getContext('2d'))};tests['canvastext'] = function(){return!!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText,'function'))};// This WebGL test may false positive. // But really it's quite impossible to know whether webgl will succeed until after you create the context. // You might have hardware that can support a 100x100 webgl canvas,but will not support a 1000x1000 webgl // canvas. So this feature inference is weak,but intentionally so. // It is known to false positive in FF4 with certain hardware and the iPad 2. tests['webgl'] = function(){return!!window.WebGLRenderingContext};tests['touch'] = function(){return Modernizr['touch']};tests['geolocation'] = function(){return!!navigator.geolocation};// Per 1.6:// This used to be Modernizr.crosswindowmessaging but the longer // name has been deprecated in favor of a shorter and property-matching one. // The old API is still available in 1.6,but as of 2.0 will throw a warning,// and in the first release thereafter disappear entirely. tests['postmessage'] = function(){return!!window.postMessage};// Web SQL database detection is tricky:// In chrome incognito mode,openDatabase is truthy,but using it will // throw an exception:http://crbug.com/42380 // We can create a dummy database,but there is no way to delete it afterwards. // Meanwhile,Safari users can get prompted on any database creation. // If they do,any page with Modernizr will give them a prompt:// http://github.com/Modernizr/Modernizr/issues/closed#issue/113 // We have chosen to allow the Chrome incognito false positive,so that Modernizr // doesn't litter the web with these test databases. As a developer,you'll have // to account for this gotcha yourself. tests['websqldatabase'] = function(){var result =!!window.openDatabase;return result};// Vendors had inconsistent prefixing with the experimental Indexed DB:// - Webkit's implementation is accessible through webkitIndexedDB // - Firefox shipped moz_indexedDB before FF4b9,but since then has been mozIndexedDB // For speed,we don't test the legacy(and beta-only) indexedDB tests['indexedDB'] = function(){for(var i = -1,len = domPrefixes.length;++i < len;){if(window[domPrefixes[i].toLowerCase()+'IndexedDB']){return true}}return!!window.indexedDB};// documentMode logic from YUI to filter out IE8 Compat Mode // which false positives. tests['hashchange'] = function(){return isEventSupported('hashchange',window) &&(document.documentMode === undefined || document.documentMode>7)};// Per 1.6:// This used to be Modernizr.historymanagement but the longer // name has been deprecated in favor of a shorter and property-matching one. // The old API is still available in 1.6,but as of 2.0 will throw a warning,// and in the first release thereafter disappear entirely. tests['history'] = function(){return!!(window.history && history.pushState)};tests['draganddrop'] = function(){return isEventSupported('dragstart') && isEventSupported('drop')};// Mozilla is targeting to land MozWebSocket for FF6 // bugzil.la/659324 tests['websockets'] = function(){for(var i = -1,len = domPrefixes.length;++i < len;){if(window[domPrefixes[i]+'WebSocket']){return true}}return 'WebSocket' in window};// http://css-tricks.com/rgba-browser-support/ tests['rgba'] = function(){// Set an rgba() color and check the returned value setCss('background-color:rgba(150,255,150,.5)');return contains(mStyle.backgroundColor,'rgba')};tests['hsla'] = function(){// Same as rgba(),in fact,browsers re-map hsla() to rgba() internally,// except IE9 who retains it as hsla setCss('background-color:hsla(120,40%,100%,.5)');return contains(mStyle.backgroundColor,'rgba') || contains(mStyle.backgroundColor,'hsla')};tests['multiplebgs'] = function(){// Setting multiple images AND a color on the background shorthand property // and then querying the style.background property value for the number of // occurrences of "url(" is a reliable method for detecting ACTUAL support for this!setCss('background:url(https://),url(https://),red url(https://)');// If the UA supports multiple backgrounds,there should be three occurrences // of the string "url(" in the return value for elemStyle.background return /(url\s*\(.*?){3}/.test(mStyle.background)};// In testing support for a given CSS property,it's legit to test:// `elem.style[styleName]!== undefined` // If the property is supported it will return an empty string,// if unsupported it will return undefined. // We'll take advantage of this quick test and skip setting a style // on our modernizr element,but instead just testing undefined vs // empty string. tests['backgroundsize'] = function(){return testPropsAll('backgroundSize')};tests['borderimage'] = function(){return testPropsAll('borderImage')};// Super comprehensive table about all the unique implementations of // border-radius:http://muddledramblings.com/table-of-css3-border-radius-compliance tests['borderradius'] = function(){return testPropsAll('borderRadius')};// WebOS unfortunately false positives on this test. tests['boxshadow'] = function(){return testPropsAll('boxShadow')};// FF3.0 will false positive on this test tests['textshadow'] = function(){return document.createElement('div').style.textShadow === ''};tests['opacity'] = function(){// Browsers that actually have CSS Opacity implemented have done so // according to spec,which means their return values are within the // range of [0.0,1.0] - including the leading zero. setCssAll('opacity:.55');// The non-literal . in this regex is intentional:// German Chrome returns this value as 0,55 // https://github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632 return /^0.55$/.test(mStyle.opacity)};tests['cssanimations'] = function(){return testPropsAll('animationName')};tests['csscolumns'] = function(){return testPropsAll('columnCount')};tests['cssgradients'] = function(){var str1 = 'background-image:',str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',str3 = 'linear-gradient(left top,#9f9,white);';setCss((str1+prefixes.join(str2+str1)+prefixes.join(str3+str1)).slice(0,-str1.length));return contains(mStyle.backgroundImage,'gradient')};tests['cssreflections'] = function(){return testPropsAll('boxReflect')};tests['csstransforms'] = function(){return!!testProps(['transformProperty','WebkitTransform','MozTransform','OTransform','msTransform'])};tests['csstransforms3d'] = function(){var ret =!!testProps(['perspectiveProperty','WebkitPerspective','MozPerspective','OPerspective','msPerspective']);// Webkit’s 3D transforms are passed off to the browser's own graphics renderer. // It works fine in Safari on Leopard and Snow Leopard,but not in Chrome in // some conditions. As a result,Webkit typically recognizes the syntax but // will sometimes throw a false positive,thus we must do a more thorough check:if(ret && 'webkitPerspective' in docElement.style){// Webkit allows this media query to succeed only if the feature is enabled. // `@media(transform-3d),(-o-transform-3d),(-moz-transform-3d),(-ms-transform-3d),(-webkit-transform-3d),(modernizr){...}` ret = Modernizr['csstransforms3d']}return ret};tests['csstransitions'] = function(){return testPropsAll('transitionProperty')};// @font-face detection routine by Diego Perini // http://javascript.nwbox.com/CSSSupport/ tests['fontface'] = function(){return Modernizr['fontface']};// CSS generated content detection tests['generatedcontent'] = function(){return Modernizr['generatedcontent']};// These tests evaluate support of the video/audio elements,as well as // testing what types of content they support. // // We're using the Boolean constructor here,so that we can extend the value // e.g. Modernizr.video // true // Modernizr.video.ogg // 'probably' // // Codec values from :http://github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845 // thx to NielsLeenheer and zcorpan // Note:in FF 3.5.1 and 3.5.0,"no" was a return value instead of empty string. // Modernizr does not normalize for that. tests['video'] = function(){var elem = document.createElement('video'),bool = false;// IE9 Running on Windows Server SKU can cause an exception to be thrown,bug #224 try{if(bool =!!elem.canPlayType){bool = new Boolean(bool);bool.ogg = elem.canPlayType('video/ogg;codecs="theora"');// Workaround required for IE9,which doesn't report video support without audio codec specified. // bug 599718 @ msft connect var h264 = 'video/mp4;codecs="avc1.42E01E';bool.h264 = elem.canPlayType(h264+'"') || elem.canPlayType(h264+',mp4a.40.2"');bool.webm = elem.canPlayType('video/webm;codecs="vp8,vorbis"')}}catch(e){}return bool};tests['audio'] = function(){var elem = document.createElement('audio'),bool = false;try{if(bool =!!elem.canPlayType){bool = new Boolean(bool);bool.ogg = elem.canPlayType('audio/ogg;codecs="vorbis"');bool.mp3 = elem.canPlayType('audio/mpeg;');// Mimetypes accepted:// https://developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements // http://bit.ly/iphoneoscodecs bool.wav = elem.canPlayType('audio/wav;codecs="1"');bool.m4a = elem.canPlayType('audio/x-m4a;') || elem.canPlayType('audio/aac;')}}catch(e){}return bool};// Firefox has made these tests rather unfun. // In FF4,if disabled,window.localStorage should === null. // Normally,we could not test that directly and need to do a // `('localStorage' in window) && ` test first because otherwise Firefox will // throw http://bugzil.la/365772 if cookies are disabled // However,in Firefox 4 betas,if dom.storage.enabled == false,just mentioning // the property will throw an exception. http://bugzil.la/599479 // This looks to be fixed for FF4 Final. // Because we are forced to try/catch this,we'll go aggressive. // FWIW:IE8 Compat mode supports these features completely:// http://www.quirksmode.org/dom/html5.html // But IE8 doesn't support either with local files tests['localstorage'] = function(){try{return!!localStorage.getItem}catch(e){return false}};tests['sessionstorage'] = function(){try{return!!sessionStorage.getItem}catch(e){return false}};tests['webworkers'] = function(){return!!window.Worker};tests['applicationcache'] = function(){return!!window.applicationCache};// Thanks to Erik Dahlstrom tests['svg'] = function(){return!!document.createElementNS &&!!document.createElementNS(ns.svg,'svg').createSVGRect};// specifically for SVG inline in HTML,not within XHTML // test page:paulirish.com/demo/inline-svg tests['inlinesvg'] = function(){var div = document.createElement('div');div.innerHTML = '<svg/>';return(div.firstChild && div.firstChild.namespaceURI) == ns.svg};// Thanks to F1lt3r and lucideer,ticket #35 tests['smil'] = function(){return!!document.createElementNS && /SVG/.test(toString.call(document.createElementNS(ns.svg,'animate')))};tests['svgclippaths'] = function(){// Possibly returns a false positive in Safari 3.2? return!!document.createElementNS && /SVG/.test(toString.call(document.createElementNS(ns.svg,'clipPath')))};// input features and input types go directly onto the ret object,bypassing the tests loop. // Hold this guy to execute in a moment. function webforms(){// Run through HTML5's new input attributes to see if the UA understands any. // We're using f which is the <input>element created early on // Mike Taylr has created a comprehensive resource for testing these attributes // when applied to all input types:// http://miketaylr.com/code/input-type-attr.html // spec:http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary // Only input placeholder is tested while textarea's placeholder is not. // Currently Safari 4 and Opera 11 have support only for the input placeholder // Both tests are available in feature-detects/forms-placeholder.js Modernizr['input'] =(function(props){for(var i = 0,len = props.length;i < len;i++){attrs[props[i]] =!!(props[i] in inputElem)}return attrs})('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));// Run through HTML5's new input types to see if the UA understands any. // This is put behind the tests runloop because it doesn't return a // true/false like all the other tests;instead,it returns an object // containing each input type with its corresponding true/false value // Big thanks to @miketaylr for the html5 forms expertise. http://miketaylr.com/ Modernizr['inputtypes'] =(function(props){for(var i = 0,bool,inputElemType,defaultView,len = props.length;i < len;i++){inputElem.setAttribute('type',inputElemType = props[i]);bool = inputElem.type!== 'text';// We first check to see if the type we give it sticks.. // If the type does,we feed it a textual value,which shouldn't be valid. // If the value doesn't stick,we know there's input sanitization which infers a custom UI if(bool){inputElem.value = smile;inputElem.style.cssText = 'position:absolute;visibility:hidden;';if(/^range$/.test(inputElemType) && inputElem.style.WebkitAppearance!== undefined){docElement.appendChild(inputElem);defaultView = document.defaultView;// Safari 2-4 allows the smiley as a value,despite making a slider bool = defaultView.getComputedStyle && defaultView.getComputedStyle(inputElem,null).WebkitAppearance!== 'textfield' && // Mobile android web browser has false positive,so must // check the height to see if the widget is actually there.(inputElem.offsetHeight!== 0);docElement.removeChild(inputElem)}else if(/^(search|tel)$/.test(inputElemType)){// Spec doesnt define any special parsing or detectable UI // behaviors so we pass these through as true // Interestingly,opera fails the earlier test,so it doesn't // even make it here.}else if(/^(url|email)$/.test(inputElemType)){// Real url and email support comes with prebaked validation. bool = inputElem.checkValidity && inputElem.checkValidity() === false}else if(/^color$/.test(inputElemType)){// chuck into DOM and force reflow for Opera bug in 11.00 // github.com/Modernizr/Modernizr/issues#issue/159 docElement.appendChild(inputElem);docElement.offsetWidth;bool = inputElem.value!= smile;docElement.removeChild(inputElem)}else{// If the upgraded input compontent rejects the:) text,we got a winner bool = inputElem.value!= smile}}inputs[props[i]] =!!bool}return inputs})('search tel url email datetime date month week time datetime-local number range color'.split(' '))}// End of test definitions // ----------------------- // Run through all tests and detect their support in the current UA. // todo:hypothetically we could be doing an array of tests and use a basic loop here. for(var feature in tests){if(hasOwnProperty(tests,feature)){// run the test,throw the return value into the Modernizr,// then based on that boolean,define an appropriate className // and push it into an array of classes we'll join later. featureName = feature.toLowerCase();Modernizr[featureName] = tests[feature]();classes.push((Modernizr[featureName] ? '':'no-')+featureName)}}// input tests need to run. Modernizr.input || webforms();Modernizr.addTest = function(feature,test){if(typeof feature == "object"){for(var key in feature){if(hasOwnProperty(feature,key)){Modernizr.addTest(key,feature[key])}}}else{feature = feature.toLowerCase();if(Modernizr[feature]!== undefined){// we're going to quit if you're trying to overwrite an existing test // if we were to allow it,we'd do this:// var re = new RegExp("\\b(no-)?"+feature+"\\b");// docElement.className = docElement.className.replace(re,'');// but,no rly,stuff 'em. return}test = typeof test == "boolean" ? test :!!test();docElement.className+= ' '+(test ? '' :'no-')+feature;Modernizr[feature] = test}return Modernizr;// allow chaining.};// Reset modElem.cssText to nothing to reduce memory footprint. setCss('');modElem = inputElem = null;//>>BEGIN IEPP // Enable HTML 5 elements for styling(and printing) in IE. if(window.attachEvent &&(function(){var elem = document.createElement('div');elem.innerHTML = '<elem></elem>';return elem.childNodes.length!== 1})()){// iepp v2 by @jon_neal & afarkas:github.com/aFarkas/iepp/(function(win,doc){win.iepp = win.iepp ||{};var iepp = win.iepp,elems = iepp.html5elements || 'abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video',elemsArr = elems.split('|'),elemsArrLen = elemsArr.length,elemRegExp = new RegExp('(^|\\s)('+elems+')','gi'),tagRegExp = new RegExp('<(\